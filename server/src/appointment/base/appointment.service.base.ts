/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Prisma, Appointment, Patient, Treatment } from "@prisma/client";

export class AppointmentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.AppointmentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AppointmentFindManyArgs>
  ): Promise<number> {
    return this.prisma.appointment.count(args);
  }

  async findMany<T extends Prisma.AppointmentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AppointmentFindManyArgs>
  ): Promise<Appointment[]> {
    return this.prisma.appointment.findMany(args);
  }
  async findOne<T extends Prisma.AppointmentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AppointmentFindUniqueArgs>
  ): Promise<Appointment | null> {
    return this.prisma.appointment.findUnique(args);
  }
  async create<T extends Prisma.AppointmentCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AppointmentCreateArgs>
  ): Promise<Appointment> {
    return this.prisma.appointment.create<T>(args);
  }
  async update<T extends Prisma.AppointmentUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AppointmentUpdateArgs>
  ): Promise<Appointment> {
    return this.prisma.appointment.update<T>(args);
  }
  async delete<T extends Prisma.AppointmentDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AppointmentDeleteArgs>
  ): Promise<Appointment> {
    return this.prisma.appointment.delete(args);
  }

  async getPatient(parentId: string): Promise<Patient | null> {
    return this.prisma.appointment
      .findUnique({
        where: { id: parentId },
      })
      .patient();
  }

  async getTreatment(parentId: string): Promise<Treatment | null> {
    return this.prisma.appointment
      .findUnique({
        where: { id: parentId },
      })
      .treatment();
  }
}
