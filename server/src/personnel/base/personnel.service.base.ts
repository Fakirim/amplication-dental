/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Prisma, Personnel } from "@prisma/client";

export class PersonnelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.PersonnelFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PersonnelFindManyArgs>
  ): Promise<number> {
    return this.prisma.personnel.count(args);
  }

  async findMany<T extends Prisma.PersonnelFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PersonnelFindManyArgs>
  ): Promise<Personnel[]> {
    return this.prisma.personnel.findMany(args);
  }
  async findOne<T extends Prisma.PersonnelFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PersonnelFindUniqueArgs>
  ): Promise<Personnel | null> {
    return this.prisma.personnel.findUnique(args);
  }
  async create<T extends Prisma.PersonnelCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PersonnelCreateArgs>
  ): Promise<Personnel> {
    return this.prisma.personnel.create<T>(args);
  }
  async update<T extends Prisma.PersonnelUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PersonnelUpdateArgs>
  ): Promise<Personnel> {
    return this.prisma.personnel.update<T>(args);
  }
  async delete<T extends Prisma.PersonnelDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PersonnelDeleteArgs>
  ): Promise<Personnel> {
    return this.prisma.personnel.delete(args);
  }
}
